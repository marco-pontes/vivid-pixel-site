steps:
  # --- ETAPA 1: BACKEND (Build, Push, Deploy) ---
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/api-backend:${SHORT_SHA}', './backend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/api-backend:${SHORT_SHA}']
    wait_for: ['build-backend']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'api-backend-service'
      - '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/api-backend:${SHORT_SHA}'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--set-secrets=SENDGRID_API_KEY=SENDGRID_API_KEY:latest'
    wait_for: ['push-backend']
  
  # --- ETAPA 2: OBTER A URL DO BACKEND ---
  # (Isto agora corre ANTES do build do frontend)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-backend-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Obtém a URL e guarda-a num ficheiro que os próximos passos podem ler
        URL=$$(gcloud run services describe api-backend-service --platform=managed --region=us-central1 --format='value(status.url)')
        echo "URL do Backend detectada: $$URL"
        echo "$$URL" > /workspace/backend_url.txt
    wait_for: ['deploy-backend']
  
  # --- ETAPA 3: FRONTEND (Build, Push, Deploy) ---
  # (O build do frontend agora espera pela URL)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Lê a URL do ficheiro
        BACKEND_URL=$$(cat /workspace/backend_url.txt)
        
        # Constrói a imagem do frontend, passando a URL real como 'build-arg'
        docker build \
          --build-arg=BUILD_TIME_BACKEND_API_URL=$$BACKEND_URL \
          --no-cache=true \
          -t 'us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/app-frontend:${SHORT_SHA}' \
          ./frontend
    wait_for: ['get-backend-url'] # Espera até que a URL esteja pronta

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/app-frontend:${SHORT_SHA}']
    wait_for: ['build-frontend']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-frontend'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'app-frontend-service'
      - '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/app-frontend:${SHORT_SHA}'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      # Nota: Não precisamos mais de 'set-env-vars', pois a URL está "cozinhada".
      # Mas não faz mal mantê-la, caso o Next.js mude de comportamento.
      - '--set-env-vars=BACKEND_API_URL=$$(cat /workspace/backend_url.txt)'
    wait_for: ['push-frontend']

# Lista de imagens
images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/api-backend:${SHORT_SHA}'
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/vivid-pixel-site/app-frontend:${SHORT_SHA}'

timeout: '1800s'